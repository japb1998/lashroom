// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/clients": {
            "get": {
                "description": "get clients by creator with filters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CLIENT"
                ],
                "summary": "get clients by creator with filters.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Phone number to filter by",
                        "name": "phone",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "email to filter by",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "First Name to filter by",
                        "name": "firstName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Last Name to filter by",
                        "name": "lastName",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.FiltersResponseDto"
                        }
                    }
                }
            },
            "post": {
                "description": "create client.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CLIENT"
                ],
                "summary": "create client.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "create client dto",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateClient"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.ClientDto"
                        }
                    }
                }
            }
        },
        "/clients/{createdBy}/{id}": {
            "get": {
                "description": "mark client as not available for notifications.",
                "tags": [
                    "CLIENT"
                ],
                "summary": "mark client as not available for notifications.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "createdBy",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "301": {
                        "description": "Moved Permanently"
                    }
                }
            }
        },
        "/clients/{id}": {
            "get": {
                "description": "Get client by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CLIENT"
                ],
                "summary": "Get client by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.ClientDto"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete client by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CLIENT"
                ],
                "summary": "delete client by ID.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.ClientDto"
                        }
                    }
                }
            },
            "patch": {
                "description": "update client.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CLIENT"
                ],
                "summary": "update client.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "patch client dto",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.PatchClient"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.ClientDto"
                        }
                    }
                }
            }
        },
        "/schedule": {
            "get": {
                "description": "gets schedule by the user email obtained in the JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SCHEDULES"
                ],
                "summary": "get schedules by creator.",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Zero indexed",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.PaginatedNotifications"
                        }
                    }
                }
            },
            "post": {
                "description": "create schedule.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "SCHEDULES"
                ],
                "summary": "create schedule.",
                "parameters": [
                    {
                        "description": "body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.NotificationInput"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/schedule/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SCHEDULES"
                ],
                "summary": "get schedules by creator.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "schedule ID",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.PaginatedNotifications"
                        }
                    }
                }
            },
            "delete": {
                "description": "deletes a schedule from both the scheduler service and db.",
                "tags": [
                    "SCHEDULES"
                ],
                "summary": "deletes a schedule from both the scheduler service and db.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "patch": {
                "description": "patch existing schedule by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SCHEDULES"
                ],
                "summary": "patch existing schedule by id.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.PatchNotification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.Notification"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.Notification": {
            "type": "object",
            "properties": {
                "client": {
                    "$ref": "#/definitions/service.ClientDto"
                },
                "createdBy": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "deliveryMethods": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "controller.PaginatedNotifications": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.Notification"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "service.ClientDto": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "lastUpdateAt": {
                    "type": "string"
                },
                "optIn": {
                    "type": "boolean"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "service.CreateClient": {
            "type": "object",
            "required": [
                "firstName",
                "lastName"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "lastUpdateAt": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "service.FiltersResponseDto": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.ClientDto"
                    }
                }
            }
        },
        "service.Notification": {
            "type": "object",
            "required": [
                "clientId",
                "createdBy",
                "date",
                "deliveryMethods",
                "id",
                "status"
            ],
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientToken": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "deliveryMethods": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "service.NotificationInput": {
            "type": "object",
            "required": [
                "clientId",
                "date",
                "deliveryMethods"
            ],
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "deliveryMethods": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "service.PatchClient": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string",
                    "minLength": 1
                },
                "lastName": {
                    "type": "string",
                    "minLength": 1
                },
                "optIn": {
                    "type": "boolean"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "service.PatchNotification": {
            "type": "object",
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "deliveryMethods": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
