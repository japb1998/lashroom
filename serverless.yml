service: ${env:APP_ID}

frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-deployment-bucket

provider:
  name: aws
  region: us-east-1
  runtime: provided.al2
  architecture: arm64
  versionFunctions: false
  tracing:
    lambda: true
    apiGateway: true
  tags:
    project: "control-tower"
  
custom:
  deploymentBucket:
    name: ${env:APP_ID}
    serverSideEncryption: AES256

package:
    individually: true

functions:
# api main handler - gin server
  Api:
    name: control-tower-api-${opt:stage, 'dev'}
    role: DefaultRole
    handler: bootstrap
    package:
      artifact: bin/app/app.zip
    memorySize: 256
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
      - http:
          path: /unsubscribe/{proxy+}
          method: ANY
          cors: true
    layers:
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-collector-arm64-ver-0-66-0:1
    environment:
      EMAIL_TABLE: !Ref NotificationsTable
      CLIENT_TABLE: !Ref ClientTable
      SCHEDULER_ROLE:  !GetAtt SchedulerRole.Arn
      NOTIFICATION_LAMBDA: !GetAtt SchedulerTargetLambdaFunction.Arn
      GIN_MODE: release
    timeout: 30
  # lambda handler that send notifications triggered by eventBridge scheduler
  SchedulerTarget:
    name: notification-handler-${opt:stage, 'dev'}
    role: DefaultRole
    handler: bootstrap
    package:
      artifact: bin/schedule-handler/schedule-handler.zip
    memorySize: 256
    timeout: 300
    layers:
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-collector-arm64-ver-0-66-0:1
    environment:
      OTEL_SERVICE_NAME: control-tower
      EMAIL_TABLE: !Ref NotificationsTable
      CLIENT_TABLE: !Ref ClientTable
      MAIL_GUN_SECRET_ID: "${opt:stage, 'dev'}/control-tower/mailgun"
      API_URL: !Join ['', ['https://', !Ref ApiGatewayRestApi , '.execute-api.',  !Sub "${AWS::Region}", '.amazonaws.com/',  "${opt:stage, 'dev'}"]]
      TWILIO_SERVICE_ID: ${env:TWILIO_SERVICE_ID}
      TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
      TWILIO_TEMPLATE_ID: HX70acce7fe8a09e290969d180791c7016
      CONNECTION_TABLE: !Ref ConnectionsDataTable
      WS_HTTPS_URL: !Join ['', ['https://', !Ref WebsocketsApi, '.execute-api.', !Sub '${AWS::Region}', '.amazonaws.com/', "${opt:stage, 'dev'}"]]
  # websocket api
  ws-connection:
    timeout: 30
    memorySize: 128
    role: DefaultRole
    handler: bootstrap
    package:
      artifact: bin/ws-connection-handler/ws-connection-handler.zip
    events:
      - websocket:
          route: $connect
          authorizer:
            name: authorizerFunc
            identitySource:
              - route.request.querystring.Auth
      - websocket:
          route: $disconnect
    environment:
      CONNECTION_TABLE: !Ref ConnectionsDataTable
      WS_HTTPS_URL: !Join ['', ['https://', !Ref WebsocketsApi, '.execute-api.', !Sub '${AWS::Region}', '.amazonaws.com/', "${opt:stage, 'dev'}"]]
  # lambda ws default route handler
  ws-default:
    timeout: 30
    memorySize: 128
    role: DefaultRole
    handler: bootstrap
    package:
      artifact: bin/ws-default-handler/ws-default-handler.zip
    events:
      - websocket: $default
    environment:
      CONNECTION_TABLE: !Ref ConnectionsDataTable
      WS_HTTPS_URL: !Join ['', ['https://', !Ref WebsocketsApi, '.execute-api.', !Sub '${AWS::Region}', '.amazonaws.com/', "${opt:stage, 'dev'}"]]
  # lambda ws ping handler - used to keep the connection alive for longer than 10 minutes
  ws-ping:
    timeout: 30
    memorySize: 128
    role: DefaultRole
    handler: bootstrap
    package:
      artifact: bin/ws-ping-handler/ws-ping-handler.zip
    events:
      - websocket:
          route: health # will trigger if $request.body.action === "ping"
    environment:
      CONNECTION_TABLE: !Ref ConnectionsDataTable
      WS_HTTPS_URL: !Join ['', ['https://', !Ref WebsocketsApi, '.execute-api.', !Sub '${AWS::Region}', '.amazonaws.com/', "${opt:stage, 'dev'}"]]
  # lambda authorizer for the websocket api
  authorizerFunc:
    timeout: 10
    memorySize: 128
    role: DefaultRole
    handler: bootstrap
    package:
      artifact: bin/authorizer/authorizer.zip
    environment:
      # AWS_REGION: ${AWS::Region} # by default this environment variable is provided in lambda
      USER_POOL: ${env:USER_POOL_ID}
      AWS_ACCOUNT_ID: !Sub ${AWS::AccountId}
      API_ID: !Ref WebsocketsApi
      STAGE: ${opt:stage, 'dev'}
# you can add CloudFormation resource templates here
resources:
  Resources:
  # Table to store notifications to be send, when and status.
    NotificationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:APP_ID}-notifications-${opt:stage, 'dev'}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: primaryKey
            AttributeType: "S"
          - AttributeName: sortKey
            AttributeType: "S"
          - AttributeName: date
            AttributeType: "S"
        KeySchema:
          - AttributeName: primaryKey
            KeyType: HASH
          - AttributeName: sortKey
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: TTL
          Enabled: true
        GlobalSecondaryIndexes:
          - IndexName: DATE
            KeySchema:
              - AttributeName: primaryKey
                KeyType: HASH
              - AttributeName: date
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL
    # Table for the App Clients 
    ClientTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:APP_ID}-client-table-${opt:stage, 'dev'}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: primaryKey
            AttributeType: "S"
          - AttributeName: sortKey
            AttributeType: "S"
        KeySchema:
          - AttributeName: primaryKey
            KeyType: HASH
          - AttributeName: sortKey
            KeyType: RANGE
    # Table to keep status from the Websocker connections.
    ConnectionsDataTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:service}-connections-database-${opt:stage, 'dev'}
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: email
              AttributeType: 'S'
            - AttributeName: connectionId
              AttributeType: 'S'
          KeySchema:
            - AttributeName: email
              KeyType: HASH
            - AttributeName: connectionId
              KeyType: RANGE   
    # Role for all Lambda functions
    DefaultRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${env:APP_ID}-default-role-${opt:stage, 'dev'}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${env:APP_ID}-dynamo-access-${opt:stage, 'dev'}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:*
                  Resource:
                    - !GetAtt NotificationsTable.Arn 
                    - !Join ["",[!GetAtt NotificationsTable.Arn, "/index/*"]]
                    - !GetAtt ClientTable.Arn 
                    - !Join ["",[!GetAtt ClientTable.Arn, "/index/*"]]
                    - !GetAtt ConnectionsDataTable.Arn 
                    - !Join ["",[!GetAtt ConnectionsDataTable.Arn, "/index/*"]]
          - PolicyName: ${env:APP_ID}-cloudwatch-default-${opt:stage, 'dev'}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                    - logs:TagResource
                    - logs:PutLogEvents
                  Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
          - PolicyName: ${env:APP_ID}-scheduler-${opt:stage, 'dev'}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: 
                    - scheduler:CreateSchedule
                    - scheduler:DeleteSchedule
                    - scheduler:GetSchedule
                    - scheduler:UpdateSchedule
                  Resource: !Sub "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/*"
                - Effect: Allow
                  Action: 
                    - iam:PassRole
                  Resource: !GetAtt SchedulerRole.Arn
          - PolicyName: ${env:APP_ID}-xray-${opt:stage, 'dev'}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - xray:PutTraceSegments
                    - xray:PutTelemetryRecords
                  Resource: "*"
          - PolicyName: ${env:APP_ID}-Secret-${opt:stage, 'dev'}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "secretsmanager:GetSecretValue"
                  Resource:
                    - !Sub "arn:aws:secretsmanager:${AWS::Region}:220162411939:secret:${opt:stage, 'dev'}/control-tower/mailgun-*"
          # policy to send messages to apigateway websocket connections.
          - PolicyName: ${env:APP_ID}-ws-access-${opt:stage, 'dev'}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                    - execute-api:ManageConnections
                  Resource:
                    - 'arn:aws:execute-api:*:*'

    SchedulerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${env:APP_ID}-scheduler-${opt:stage, 'dev'}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - scheduler.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${env:APP_ID}-lambda-access-${opt:stage, 'dev'}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - "*"

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: Cognito
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${env:USER_POOL_ID}


